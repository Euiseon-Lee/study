class Solution {
    public int[][] solution(int n) {
        /**
         * ✅ 문제 요약
         *  - n이 주어졌을 때, n x n 크기의 단위 행렬(identity matrix)을 생성하는 문제
         *  - 주대각선(i == j) 위치에만 1을 넣고, 나머지는 0으로 두는 것이 핵심
         *
         * 🔁 기존 코드 흐름
         *  - 이중 for문으로 i와 j를 모두 순회하며
         *    i == j 조건이 성립할 때 1, 그 외에는 0을 대입
         *  - 하지만 Java의 배열은 기본값이 0이므로 else 처리 불필요
         *
         * 💡 개선 포인트
         *  - Java의 int 배열은 생성 시 모든 값이 자동으로 0으로 초기화됨
         *  - 따라서 i == j일 때만 answer[i][i] = 1을 수행하면 나머지는 손대지 않아도 됨
         *  - 이중 반복 없이 단일 루프만으로 의도한 배열 생성 가능
         *
         * ⚙️ 성능 분석
         *  - 기존: 이중 for문으로 O(n²) 순회 → 비교 및 대입 모두 수행
         *  - 개선: 단일 for문 O(n) → 대입만 수행 → 분기, 비교 비용 제거
         *  - 테스트 결과 평균 0.01~0.06ms로 매우 안정적이며, 실행 시간 분산도 작음
         *
         * 🧠 배열 초기화 팁 (실무 참고)
         *  - Java 기본형 배열은 자동으로 0 (int), false (boolean), null (reference)로 초기화됨
         *  - 따라서 int[] arr = new int[n]; → 별도 초기화 없이 바로 사용 가능
         *  - 실무에서 Arrays.fill() 등을 남용하지 않고 의도에 맞게 활용할 수 있는 구조 감각 필요
         *
         * 🛠 실무 활용도
         *  - 단위 행렬은 수학 연산, 3D 그래픽스, 신경망 초기화 등에서 매우 자주 사용
         *  - 실무에서는 Apache Commons Math, EJML, ND4J 같은 수치 라이브러리를 사용하지만,
         *    원리 이해를 위해서는 직접 구현 능력이 필요함
         *
         * 🧠 현재 구현 수준 평가
         *  - 배열 구조의 초기 상태를 정확히 이해하고, 불필요한 반복 제거 판단 가능
         *  - 조건문 제거, 기본값 활용, 메모리 모델까지 고려한 코드 구성 → 실무 구조 사고 Level 3 상위권
         */
        int[][] answer = new int[n][n];
        for (int i = 0; i < n; i++) {
            answer[i][i] = 1;  // 대각선에만 1을 설정
        }
        /* 기존 코드
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                answer[i][j] = i == j ? 1 : 0;
            }
        }
        */
        return answer;
    }
}
