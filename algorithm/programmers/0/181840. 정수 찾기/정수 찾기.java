class Solution {
    public int solution(int[] num_list, int n) {
        /**
         * ✅ 문제 요약
         *  - 정수 배열 num_list에 정수 n이 존재하면 1, 없으면 0을 반환하는 문제
         *  - 배열 내 값의 존재 여부만 확인하면 되므로 탐색 후 조기 종료가 핵심
         *
         * 🔁 기존 코드 흐름
         *  - 배열을 앞에서부터 순차 탐색하며 num_list[i] == n이면 즉시 return 1
         *  - 끝까지 찾지 못하면 return 0
         *
         * 💡 개선 포인트
         *  - 현재 구조는 가장 효율적인 기본 탐색 구조 (O(n), 조기 탈출 포함)
         *  - 가독성만 고려해 향상된 for문 사용 가능 (for-each)
         *  - Java 8 이상에서는 Arrays.stream(num_list).anyMatch(i -> i == n)로도 표현 가능
         *  - 실무에서는 입력 검증(n이 null이 아닌지 등) 추가될 수 있음
         *
         * ⚙️ 성능 분석
         *  - 시간복잡도: O(n), 단 조기 탈출 있으므로 평균 성능은 매우 우수
         *  - 테스트 결과 모든 케이스에서 0.01~0.02ms → 최적 성능 수준
         *
         * 🧠 배열 탐색 팁
         *  - 조기 반환 구조를 잘 활용하면 무조건 끝까지 순회하는 비용을 아낄 수 있음
         *  - index 필요 없는 경우엔 for-each 구조가 더 읽기 쉬움
         *  - 실무에서 large dataset일 경우 Set으로 변환 후 contains 사용도 고려 가능
         *
         * 🛠 실무 활용도
         *  - 배열/리스트 내부 조건 필터링에서 자주 사용되는 기초 로직
         *  - 로직은 단순하지만 "빠르게 탈출하는 구조를 설계할 수 있는가"가 중요한 포인트
         *
         * 🧠 현재 구현 수준 평가
         *  - 단순 탐색 구조를 정확하게 표현했으며, 성능상 최적화 여지도 없음
         *  - 조건 분기 판단 및 조기 반환 설계에 익숙함 → 실무 구조 사고 Level 3 기준 충족
         */
        for (int num : num_list) {
            if (num == n) return 1;
        }
        return 0;
    }
}
