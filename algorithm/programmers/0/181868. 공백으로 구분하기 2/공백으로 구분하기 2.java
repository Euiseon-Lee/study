class Solution {
    public String[] solution(String my_string) {
        /**
         * ✅ 문제 요약  
         *  - 문자열 `my_string`에서 **여러 개의 공백을 구분자**로 간주하여 단어들을 분리  
         *  - 앞뒤에 공백이 있을 수도 있음 → 정제(trim) 필요  
         *
         * 🔁 로직 구조  
         *  - `trim()`으로 양쪽 공백 제거  
         *  - `" +"` 정규표현식으로 **하나 이상의 공백**을 구분자로 인식하여 split  
         *  - 그 결과 문자열 배열로 반환  
         *
         * ✅ 개선 코드 특징  
         *  - `split(" ")`은 공백이 2개 이상일 경우 빈 문자열이 포함됨 → 실무에서는 오류 유발 가능  
         *  - `" +"` 정규식 사용으로 공백 수에 관계없이 단어만 분리 가능  
         *  - `trim()`을 통해 앞뒤 불필요한 공백을 제거하여 정확한 토큰 분리 수행  
         *
         * ⚙️ 성능 분석  
         *  - 시간복잡도: O(n), 문자열 전체 순회 및 정규식 매칭  
         *  - 공간복잡도: O(k), 분리된 단어 수 만큼의 배열  
         *  - 테스트 결과:  
         *    - 평균 0.06ms ~ 1.01ms  
         *    - 문자열 길이에 비례하며 정규식 split 비용 포함  
         *
         * 🛠 실무 활용도  
         *  - 사용자 입력 파싱, 명령어 해석, 로그 분석 등에서 매우 유용  
         *  - 일반적으로 `"\\s+"` 또는 `" +"`로 처리하고, `trim()`은 항상 함께 사용함  
         *  - 이 패턴은 텍스트 전처리의 거의 표준 구조  
         */
        return my_string.trim().split(" +");
    }
}
